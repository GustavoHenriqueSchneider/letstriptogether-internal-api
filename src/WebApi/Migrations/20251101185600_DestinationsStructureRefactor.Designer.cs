// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Context.Implementations;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251101185600_DestinationsStructureRefactor")]
    partial class DestinationsStructureRefactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Models.Aggregates.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.DestinationAttraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("DestinationAttractions");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TripExpectedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupInvitations");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupMatches");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupMemberDestinationVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMemberId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("GroupMemberId");

                    b.ToTable("GroupMemberDestinationVotes");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LikesCommercial")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<string>>("_culture")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("Culture");

                    b.PrimitiveCollection<List<string>>("_entertainment")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("Entertainment");

                    b.PrimitiveCollection<List<string>>("_food")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("Food");

                    b.PrimitiveCollection<List<string>>("_placeTypes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("PlaceTypes");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("GroupPreferences");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.UserGroupInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupInvitationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupInvitationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupInvitations");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LikesCommercial")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("_culture")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("Culture");

                    b.PrimitiveCollection<List<string>>("_entertainment")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("Entertainment");

                    b.PrimitiveCollection<List<string>>("_food")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("Food");

                    b.PrimitiveCollection<List<string>>("_placeTypes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("PlaceTypes");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.DestinationAttraction", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.Destination", "Destination")
                        .WithMany("Attractions")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupInvitation", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.Group", "Group")
                        .WithMany("Invitations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupMatch", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.Destination", "Destination")
                        .WithMany("GroupMatches")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Aggregates.Group", "Group")
                        .WithMany("Matches")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupMember", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Aggregates.User", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupMemberDestinationVote", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.Destination", "Destination")
                        .WithMany("GroupMemberVotes")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Aggregates.GroupMember", "GroupMember")
                        .WithMany("Votes")
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("GroupMember");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupPreference", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.Group", "Group")
                        .WithOne("Preferences")
                        .HasForeignKey("WebApi.Models.Aggregates.GroupPreference", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.UserGroupInvitation", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.GroupInvitation", "GroupInvitation")
                        .WithMany("AnsweredBy")
                        .HasForeignKey("GroupInvitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Aggregates.User", "User")
                        .WithMany("AcceptedInvitations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupInvitation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.UserPreference", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.User", "User")
                        .WithOne("Preferences")
                        .HasForeignKey("WebApi.Models.Aggregates.UserPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.UserRole", b =>
                {
                    b.HasOne("WebApi.Models.Aggregates.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Aggregates.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.Destination", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("GroupMatches");

                    b.Navigation("GroupMemberVotes");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.Group", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Matches");

                    b.Navigation("Members");

                    b.Navigation("Preferences")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupInvitation", b =>
                {
                    b.Navigation("AnsweredBy");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.GroupMember", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebApi.Models.Aggregates.User", b =>
                {
                    b.Navigation("AcceptedInvitations");

                    b.Navigation("GroupMemberships");

                    b.Navigation("Preferences");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
